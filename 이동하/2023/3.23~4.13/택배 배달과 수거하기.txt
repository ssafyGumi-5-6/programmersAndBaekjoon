import java.util.*;

class Solution {
    public long solution(int cap, int n, int[] deliveries, int[] pickups) {
        long answer = 0;
        Stack<Integer> del = new Stack<>();
        Stack<Integer> pick = new Stack<>();
        for (int i = 0; i < n; i++) {
            if (deliveries[i] > 0) del.push(i);
            if (pickups[i] > 0) pick.push(i);
        }
        while (del.size() > 0 || pick.size() > 0) {
            if (del.size() > 0 && pick.size() > 0) {
                answer += Math.max(del.peek(), pick.peek()) + 1;
            } else if (del.size() > 0) {
                answer += del.peek() + 1;
            } else if (pick.size() > 0) {
                answer += pick.peek() + 1;
            }
            int c = cap;
            while (del.size() > 0) {
                if (deliveries[del.peek()] > c) {
                    deliveries[del.peek()] -= c;
                    break;
                }
                else {
                    c -= deliveries[del.pop()];
                }
            }
            c = cap;
            while (pick.size() > 0) {
                if (pickups[pick.peek()] > c) {
                    pickups[pick.peek()] -= c;
                    break;
                }
                else {
                    c -= pickups[pick.pop()];
                }
            }
        }
        System.out.println(answer);
        return answer * 2;
    }
}