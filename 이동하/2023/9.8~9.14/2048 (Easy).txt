import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Node {
    int r, c, v;
    Node (int r, int c, int v) {
        this.r = r;
        this.c = c;
        this.v = v;
    }
}
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int [] [] delta = {{0,1},{1,0},{0,-1},{-1,0}};
        int N = Integer.parseInt(br.readLine());
        ArrayList<Node> start_list = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for (int j = 0; j < N; j++) {
                int t = Integer.parseInt(st.nextToken());
                if (t > 0) start_list.add(new Node(i, j, t));
            }
        }
        LinkedList<PriorityQueue<Node>> q = new LinkedList<>();
        LinkedList<int []> direction_helper = new LinkedList<>();
        LinkedList<Integer> count_helper = new LinkedList<>();
        for (int [] d : delta) {
            PriorityQueue<Node> pq = new PriorityQueue<>((o1, o2) -> (o2.r*d[0] + o2.c*d[1]) - (o1.r*d[0] + o1.c*d[1]));
            for (Node n : start_list) {
                pq.offer(new Node(n.r, n.c, n.v));
            }
            q.offer(pq);
            direction_helper.offer(d);
            count_helper.offer(0);
        }

        int answer = 0;
        while (!q.isEmpty()) {
            PriorityQueue<Node> state = q.poll();
            int [] d_helper = direction_helper.poll();
            int c_helper = count_helper.poll();

//            if (c_helper > 5) System.out.println("!!!!");
            if (c_helper >= 5) {
                int answer_helper = 0;
                while(!state.isEmpty()) {
                    Node n = state.poll();
                    answer_helper = Math.max(answer_helper, n.v);
                }
                answer = Math.max(answer, answer_helper);
                continue;
            }

            int [] [] board = new int [N] [N];
            boolean [] [] plused = new boolean [N] [N];
//            System.out.println("--------");
            while (!state.isEmpty()) {
                Node stone = state.poll();
                while (true) {
                    int next_r = stone.r + d_helper[0];
                    int next_c = stone.c + d_helper[1];
                    if (next_r < 0 || next_r >= N || next_c < 0 || next_c >= N
                            || (board[next_r][next_c] > 0 && board[next_r][next_c] != stone.v)) {
                        board[stone.r][stone.c] = stone.v;
                        break;
                    } else if (board[next_r][next_c] == stone.v && plused[next_r][next_c]) {
                        board[stone.r][stone.c] += stone.v;
                        break;
                    } else if (board[next_r][next_c] == stone.v && !plused[next_r][next_c]) {
                        board[next_r][next_c] *= 2;
                        plused[next_r][next_c] = true;
                        break;
                    } else {
                        stone.r = next_r;
                        stone.c = next_c;
                    }
                }
//                if (c_helper == 0) {
//                    System.out.println(c_helper);
//                    for (int[] i : board) System.out.println(Arrays.toString(i));
//                    System.out.println();
//                }
            }
            for (int [] d : delta) {
                PriorityQueue<Node> pq = new PriorityQueue<>((o1, o2) -> (o2.r*d[0] + o2.c*d[1]) - (o1.r*d[0] + o1.c*d[1]));
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        if (board[i][j] == 0) continue;
                        pq.offer(new Node(i, j, board[i][j]));
                    }
                }
                q.offer(pq);
                direction_helper.offer(d);
                count_helper.offer(c_helper + 1);
            }
        }
        System.out.println(answer);
    }
}
