import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int N, L, answer = 0;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());
        int [] [] board = new int [N] [N];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for (int j = 0; j < N; j++) {
                board[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        for (int i = 0; i < N; i++) {
            solutioning(board[i]);
        }
        int [] temp = new int [N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                temp[j] = board[j][i];
            }
            solutioning(temp);
        }
        System.out.println(answer);
    }
    static void solutioning(int [] data) {
//        System.out.println(Arrays.toString(data));
        boolean [] used = new boolean [N];
        for (int i = 1; i < N; i++) {
            int height_difference = data[i-1] - data[i];
            if (Math.abs(height_difference) > 1) {
//                System.out.println(i + " 두칸 이상 차이");
                return;
            }
            else if (height_difference == 1) {
                int j;
                used[i] = true;
                for (j = i+1; j < i+L; j++) {
                    if (j >= N) {
//                        System.out.println(i + " 오른쪽 칸이 부족");
                        return;
                    }
                    used[j] = true;
                    if (data[j] != data[i]) {
//                        System.out.println(i + " 오른쪽으로 높이가 틀림");
                        return;
                    }
                }
                i = j-1;
//                System.out.println(i + " " + Arrays.toString(used));
            } else if (height_difference == -1) {
                if (i-1 >= 0 && used[i-1]) {
//                    System.out.println(i + " 이미 경사로 사용중");
                    return;
                }
                for (int j = i-2; j >= i - L; j--) {
                    if (j < 0) {
//                        System.out.println(i + " 왼쪽 칸이 부족");
                        return;
                    }
                    if (used[j]) {
//                        System.out.println(i + " 이미 경사로 사용중");
                        return;
                    }
                    if (data[j] != data[i-1]) {
//                        System.out.println(i + " 왼쪽으로 높이가 틀림");
                        return;
                    }
                }
            }
        }
//        System.out.println("성공");
        answer++;
    }
}
