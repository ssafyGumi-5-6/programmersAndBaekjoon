import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    static int N;
    static char [] sik, doing = {' ', '+', '-'};
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int TC = Integer.parseInt(br.readLine());
        for (int testcase = 1; testcase <= TC ; testcase++) {
            N = Integer.parseInt(br.readLine());
            sik = new char [N * 2];
            sik[0] = '+';
            for (int i = 1; i < N * 2; i += 2) {
                sik[i] = (char)((i / 2 + 1) + '0');
            }
//            System.out.println(Arrays.toString(sik));
            inserting(2);
            sb.append("\n");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.deleteCharAt(sb.length() - 1);
        System.out.println(sb);
    }
    static void inserting(int level) {
        if (level >= N * 2) {
//            System.out.println(Arrays.toString(sik));
            int current = 0;
            int temping = N;
            int helper = 1;
//            char prev = sik[N*2-2];
            for (int i = N * 2 - 2; i >= 0; i--) {
                if (sik[i] == '+') {
                    current += temping;
                    temping = 0;
                    helper = 1;
                } else if (sik[i] == '-') {
                    current -= temping;
                    temping = 0;
                    helper = 1;
                } else if (sik[i] == ' ') {
                    i--;
                    helper *= 10;
                    temping += helper * (sik[i] - '0');
                } else {
                    temping = sik[i] - '0';
                }
            }
//            System.out.println(current);
            if (current == 0) {
                for (int i = 1; i < N*2; i++) {
                    sb.append(sik[i]);
                }
                sb.append("\n");
            }
            return;
        }
        for (char c : doing) {
            sik[level] = c;
            inserting(level + 2);
        }
    }
}
