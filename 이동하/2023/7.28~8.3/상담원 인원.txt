import java.util.*;

class Solution {
    int [] type;
    int N, K;
    int [] [] REQS;
    int answer = Integer.MAX_VALUE;
    public int solution(int k, int n, int[][] reqs) {
        type = new int [k+1];
        K = k;
        N = n;
        REQS = reqs;
        type[k] = n;
        make_case(1);
        return answer;
    }
    void make_case(int level) {
        if (type[K] < 1) return;
        if (level >= K) {
            // System.out.println(Arrays.toString(type));
            
            int waiting = 0;
            HashMap<Integer, PriorityQueue<Integer>> pq_map = new HashMap<>();
            for (int i = 1; i <= K; i++) pq_map.put(i, new PriorityQueue<>((o1, o2) -> o1 - o2));
            for (int [] i : REQS) {
                if (pq_map.get(i[2]).size() == 0) {
                    pq_map.get(i[2]).add(i[0] + i[1]);
                    continue;
                }
                if (pq_map.get(i[2]).peek() <= i[0]) {
                    pq_map.get(i[2]).poll();
                    pq_map.get(i[2]).add(i[0] + i[1]);
                } else {
                    if (pq_map.get(i[2]).size() < type[i[2]]) {
                        pq_map.get(i[2]).add(i[0] + i[1]);
                    } else {
                        waiting += pq_map.get(i[2]).peek() - i[0];
                        int temp = pq_map.get(i[2]).poll();
                        pq_map.get(i[2]).add(temp + i[1]);
                    }
                }
            }
            
            // System.out.println(waiting);
            answer = Math.min(answer, waiting);
            return;
        }
        for (int i = 1; i <= N-K+1; i++) {
            type[level] = i;
            type[K] -= i;
            make_case(level + 1);
            type[K] += i;
            type[level] = 0;
        }
    }
}