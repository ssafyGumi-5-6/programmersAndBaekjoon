import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

//class Node {
//    int p;
//    int weight;
//    Node(int p, int weight) {
//        this.p = p;
//        this.weight = weight;
//    }
//}
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int [] cost = new int [200001];
        for (int i = 0; i <= 200000; i++) cost[i] = Integer.MAX_VALUE;
        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> {
            return cost[o1] - cost[o2];
        });
        pq.offer(N);
        cost[N] = 0;

//        Loop1:
        while(!pq.isEmpty()) {
            int p = pq.poll();
            if (p - 1 >= 0 && cost[p-1] > cost[p] + 1) {
//                if (p - 1 == M) {
//                    System.out.println(cost[p] + 1);
//                    break Loop1;
//                }
                cost[p-1] = cost[p] + 1;
                pq.offer(p-1);
            }
            if (p + 1 <= 200000 && cost[p+1] > cost[p] + 1) {
//                if (p + 1 == M) {
//                    System.out.println(cost[p] + 1);
//                    break Loop1;
//                }
                cost[p+1] = cost[p] + 1;
                pq.offer(p+1);
            }
            if (p * 2 <= 200000 && cost[p*2] > cost[p]) {
//                if (p * 2 == M) {
//                    System.out.println(cost[p]);
//                    break Loop1;
//                }
                cost[p*2] = cost[p];
                pq.offer(p*2);
            }
        }
        System.out.println(cost[M]);
    }
}