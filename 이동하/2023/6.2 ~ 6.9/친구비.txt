import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        // 표준입력을 위한 변수를 선언해요
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        // 입력을 받아 볼게요!
        st = new StringTokenizer(br.readLine(), " ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        // 코스트를 기록할 배열을 만들어요
        int [] cost = new int [N+1];
        st = new StringTokenizer(br.readLine(), " ");
        for (int i = 1; i <= N; i++) {
            cost[i] = Integer.parseInt(st.nextToken());
        }

        // 패런팅 할 배열을 만들어요
        int [] parent = new int [N+1];
        for (int i = 1; i <= N; i++) {
            parent[i] = i;
        }

        // 패런팅을 통해 유니언 셋을 해요 기준은 코스트에요
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int p_a = parenting(a, parent);
            int p_b = parenting(b, parent);
            if (cost[p_a] > cost[p_b]) {
                parent[p_a] = parent[p_b];
            } else {
                parent[p_b] = parent[p_a];
            }
        }

        // 패런팅을 통해 루트 노드들을 구해요
        HashSet<Integer> hs = new HashSet<>();
        for (int i = 1; i <= N; i++) hs.add(parenting(parent[i], parent));

        // 루트 노드의 합을 구해요
        int answer = 0;
        for (int i : hs) answer += cost[i];

        // 답을 출력해요
        if (answer <= k) System.out.println(answer);
        else System.out.println("Oh no");
    }

    static int parenting(int a, int [] parent) {
        if (a == parent[a]) return a;
        else return parenting(parent[a], parent);
    }
}